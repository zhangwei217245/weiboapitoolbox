<?xml version="1.0" encoding="UTF-8"?>

<!--
    Document   : t_sina_rest_api.xml
    Created on : 2010年8月3日, 上午11:02
    Author     : x-spirit
    Description:
        This Document was defined to specify all the REST APIs of t.sina
-->

<weiboAPIs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="ApiDoc.xsd">
    <version value="1.0">

        <class id="anyAPI" index="0" desc="any API">
            <catagory id="anyAPI" index="0" desc="any API">
                <api id="anyAPI" index="0" desc="any API">
                    <url>anyAPI</url>
                    <formats>
                        <format>XML</format>
                        <format>JSON</format>
                        <format>RSS</format>
                        <format>ATOM</format>
                    </formats>
                    <methods>
                        <method>GET</method>
                        <method>POST</method>
                        <method>PUT</method>
                        <method>DELETE</method>
                    </methods>
                    <enctype>application/x-www-form-urlencoded</enctype>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params/>
                    <description>您可以用这一项来测试任何您想要测试的API</description>
                </api>
            </catagory>
        </class>
        
        <class id="baseData" index="1" desc="微博基础数据接口 (Rest API)">

            <catagory id="timeLine" index="1" desc="获取下行数据集(timeline)接口">
                
                <api id="statuses/public_timeline" index="1" desc="获取最新更新的公共微博消息">
                    <url>statuses/public_timeline</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>true</rate_limit>
                    <params></params>
                    <description>
                        返回最新更新的20条微博消息。为避免资源浪费及提高效率，对消息缓存60秒。&lt;br/&gt;
                        * 注意geo地理位置字段仅对有地理位置的微博才有返回
                    </description>
                </api>

                <api id="statuses/friends_timeline" index="2" desc="获取当前用户所关注用户的最新微博信息">
                    <url>statuses/friends_timeline</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" optional="true" desc="只返回ID比since_id大（比since_id时间晚的）的微博信息内容"/>
                        <param id="max_id" optional="true" desc="返回ID不大于max_id的微博信息内容"/>
                        <param id="count" optional="true" desc="每次返回的最大记录数，不能超过200，默认20"/>
                        <param id="page" optional="true" desc="返回结果的页序号。注意：有分页限制。根据用户关注对象发表的数量，通常最多返回1,000条最新微博分页内容, 默认1"/>
                    </params>
                    <description>
                        返回用户所有关注用户最新n条微博信息。和用户“我的首页”返回内容相同。 同home_timeline。
                    </description>
                </api>

                <api id="statuses/home_timeline" index="3" desc="获取当前用户所关注用户的最新微博信息">
                    <url>statuses/home_timeline</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" rest="false" optional="true" desc="只返回ID比since_id大（比since_id时间晚的）的微博信息内容"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id的微博信息内容"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数，不能超过200，默认20"/>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制。根据用户关注对象发表的数量，通常最多返回1,000条最新微博分页内容, 默认1"/>
                    </params>
                    <description>
                        返回用户所有关注用户最新n条微博信息。和用户“我的首页”返回内容相同。同friends_timeline。
                    </description>
                </api>

                <api id="statuses/user_timeline" index="4" desc="获取用户发布的微博信息列表">
                    <url>statuses/user_timeline</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="true" desc="根据指定用户UID或微博昵称来返回微博信息"/>
                        <param id="user_id" rest="false" optional="true" desc="用户UID，主要是用来区分用户UID跟微博昵称一样，产生歧义的时候，特别是在微博昵称为数字导致和用户Uid发生歧义"/>
                        <param id="screen_name" rest="false" optional="true" desc="微博昵称，主要是用来区分用户UID跟微博昵称一样，产生歧义的时候"/>
                        <param id="since_id" rest="false" optional="true" desc="只返回ID比since_id大（比since_id时间晚的）的微博信息内容"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id的微博信息内容"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数，最多返回200条，默认20"/>
                        <param id="page" rest="false" optional="true" desc="分页返回。注意：最多返回200条分页内容"/>
                    </params>
                    <description>
                        返回用户的发布的最近n条信息，和用户微博页面返回内容是一致的。此接口也可以请求其他用户的最新发表微博。&lt;br/&gt;
                        * 默认返回最近15天以内的微博信息&lt;br/&gt;
                        * 由于分页限制，暂时最多只能返回用户最新的200条微博信息&lt;br/&gt;
                        * 用户最多只能请求到最近200条记录&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/mentions" index="5" desc="获取@当前用户的微博列表">
                    <url>statuses/mentions</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" rest="false" optional="true" desc="返回ID比数值since_id大（比since_id时间晚的）的提到"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id(时间不晚于max_id)的提到"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200，默认为20"/>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制"/>
                    </params>
                    <description>
                        返回最新n条@我的微博
                    </description>
                </api>

                <api id="statuses/comments_timeline" index="6" desc="获取当前用户发送及收到的评论列表">
                    <url>statuses/comments_timeline</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" rest="false" optional="true" desc="返回ID比数值since_id大（比since_id时间晚的）的评论"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id(时间不晚于max_id)的评论"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200，默认为20"/>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制"/>
                    </params>
                    <description>
                        按时间顺序返回最新n条发送及收到的评论。类似微博的friends_timeline接口
                    </description>
                </api>

                <api id="statuses/comments_by_me" index="7" desc="获取当前用户发出的评论">
                    <url>statuses/comments_by_me</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" rest="false" optional="true" desc="只返回比since_id大（比since_id时间晚的）的评论"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id的评论"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数，最多返回200条，默认为20"/>
                        <param id="page" rest="false" optional="true" desc="分页返回。注意：最多返回200条分页内容"/>
                    </params>
                    <description>
                        发出的评论
                    </description>
                </api>

                <api id="statuses/comments" index="8" desc="获取指定微博的评论列表">
                    <url>statuses/comments</url>
                    <formats>xml,json,rss,atom</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="返回指定的微博ID"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200，默认为20"/>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制"/>
                    </params>
                    <description>
                        返回指定微博的最新n条评论&lt;br/&gt;
                        * 缺少参数，将返回400错误&lt;br/&gt;
                        * 微博ID不存在，将返回500错误 &lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/counts" index="9" desc="批量获取一组微博的评论数及转发数">
                    <url>statuses/counts</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="ids" rest="false" optional="false" desc="微博ID号列表，用逗号隔开"/>
                    </params>
                    <description>
                        批量统计微博的评论数，转发数，一次请求最多获取100个&lt;br/&gt;
                        * 缺少参数返回403&lt;br/&gt;
                        * 不存在的id(或者已删除微博的id)在结果集中会直接忽略，而不会返回其他提示。&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/unread" index="10" desc="获取当前用户未读消息数">
                    <url>statuses/unread</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params></params>
                    <description>
                        获取当前用户Web未读消息数，包括@我的, 新评论，新私信，新粉丝数。
                    </description>
                </api>
                
            </catagory>

            <catagory id="statusAccess" index="2" desc="微博访问接口">

                <api id="statuses/show/:id" index="1" desc="根据ID获取单条微博信息内容">
                    <url>statuses/show/:id</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要获取已发表的微博ID,如ID不存在返回空"/>
                    </params>
                    <description>
                        获取单条ID的微博信息，作者信息将同时返回
                    </description>
                </api>

                <api id=":userid/statuses/:id" index="2" desc="根据微博ID和用户ID跳转到单条微博页面">
                    <url>:userid/statuses/:id</url>
                    <formats>none</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要获取已发表的微博ID,如ID不存在返回空"/>
                        <param id="userid" rest="true" optional="false" desc="该微博发布人的uid"/>
                    </params>
                    <description>
                        单条微博的Web访问路径。可以通过此url跳转到微博对应的Web网页
                    </description>
                </api>

                <api id="statuses/update" index="3" desc="发布一条微博信息">
                    <url>statuses/update</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="status" rest="false" optional="false" desc="要更新的微博信息。必须做URLEncode,信息内容部超过140个汉字,为空返回400错误"/>
                        <param id="in_reply_to_status_id" rest="false" optional="true" desc="@ 需要回复的微博信息ID, 这个参数只有在微博内容以 @username 开头才有意义。（即将推出）"/>
                        <param id="lat" rest="false" optional="true" desc="纬度，发表当前微博所在的地理位置，有效范围 -90.0到+90.0, +表示北纬。只有用户设置中geo_enabled=true时候地理位置才有效(仅对受邀请的合作开发者开放)"/>
                        <param id="long" rest="false" optional="true" desc="经度。有效范围-180.0到+180.0, +表示东经。(仅对受邀请的合作开发者开放)"/>
                    </params>
                    <description>
                        发布一条微博信息。请求必须用POST方式提交。为防止重复，发布的信息与当前最新信息一样话，将会被忽略&lt;br/&gt;
                        * 如果没有登录或超过发布上限，将返回403错误&lt;br/&gt;
                        * 如果in_reply_to_status_id不存在，将返回500错误&lt;br/&gt;
                        * 系统将忽略重复发布的信息。每次发布将比较最后一条发布消息，如果一样将被忽略。因此用户不能连续提交相同信息。&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/upload" index="4" desc="上传图片并发布一条微博信息">
                    <url>statuses/upload</url>
                    <formats>xml,json</formats>
                    <methods enctype="multipart/form-data">POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="status" rest="false" optional="false" desc="要更新的微博信息。必须做URLEncode,信息内容不超过140个汉字。支持全角、半角字符"/>
                        <param id="pic" rest="false" optional="false" desc="仅支持JPEG,GIF,PNG图片,为空返回400错误。目前上传图片大小限制为&lt;1M。"/>
                        <param id="lat" rest="false" optional="true" desc="纬度，发表当前微博所在的地理位置，有效范围 -90.0到+90.0, +表示北纬。只有用户设置中geo_enabled=true时候地理位置才有效。(保留字段，暂不支持)"/>
                        <param id="long" rest="false" optional="true" desc="经度。有效范围-180.0到+180.0, +表示东经。(保留字段，暂不支持)"/>
                    </params>
                    <description>
                        上传图片及发布微博信息。请求必须用POST方式提交。为防止重复，发布的信息与当前最新信息一样话，将会被忽略。目前上传图片大小限制为&lt;1M&lt;br/&gt;
                        * 如果没有登录或超过发布上限，将返回403错误&lt;br/&gt;
                        * 系统将忽略重复发布的信息。每次发布将比较最后一条发布消息，如果一样将被忽略。因此用户不能连续提交相同信息。发布成功返回发布的信息ID,否则返回为空。&lt;br/&gt;
                        * 如果使用的Oauth认证，图片参数pic不参与签名。&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/destroy/:id" index="5" desc="删除一条微博信息">
                    <url>statuses/destroy/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST,DELETE</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要删除的微博ID."/>
                    </params>
                    <description>
                        删除微博。注意：只能删除自己发布的信息。
                        * 如果参数错误，将返回400错误&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/repost" index="6" desc="转发一条微博信息（可加评论）">
                    <url>statuses/repost</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="转发的微博ID"/>
                        <param id="status" rest="false" optional="true" desc="添加的转发信息。必须做URLEncode,信息内容不超过140个汉字。如不填则自动生成类似“转发 @author: 原内容”文字"/>
                    </params>
                    <description>
                        转发一条微博信息。请求必须用POST方式提交。为防止重复，发布的信息与最新信息一样话，将会被忽略。&lt;br/&gt;
                        * 如果没有登录，将返回403错误&lt;br/&gt;
                        * 转发的微博不存在，将返回500错误&lt;br/&gt;
                        * 微博将忽略重复的发布。每次发布将比较登录用户的最新一条发布消息，如果一样将被忽略。因此，用户不能连续提交相同信息。 发布成功返回发布的信息ID,否则返回为空。 &lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/retweet/:id" index="7" desc="转发一条微博信息（可加评论）">
                    <url>statuses/retweet/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="转发的微博ID"/>
                        <param id="status" rest="false" optional="true" desc="添加的转发信息。必须做URLEncode,信息内容不超过140个汉字。如不填则自动生成类似“转发 @author: 原内容”文字"/>
                    </params>
                    <description>
                        转发一条微博信息。请求必须用POST方式提交。为防止重复，发布的信息与最新信息一样话，将会被忽略。&lt;br/&gt;
                        * 如果没有登录，将返回403错误&lt;br/&gt;
                        * 转发的微博不存在，将返回500错误&lt;br/&gt;
                        * 微博将忽略重复的发布。每次发布将比较登录用户的最新一条发布消息，如果一样将被忽略。因此，用户不能连续提交相同信息。 发布成功返回发布的信息ID,否则返回为空。 &lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/comment" index="8" desc="对一条微博信息进行评论">
                    <url>statuses/comment</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="要评论的微博id"/>
                        <param id="comment" rest="false" optional="false" desc="评论内容。必须做URLEncode,信息内容不超过140个汉字"/>
                        <param id="cid" rest="false" optional="true" desc="要评论的评论id"/>
                    </params>
                    <description>
                        对一条微博信息进行评论。请求必须用POST方式提交。为防止重复，发布的信息与最后一条评论信息一样话，将会被忽略。&lt;br/&gt;
                        * 如果没有登录或超过发布上限，将返回403错误&lt;br/&gt;
                        * 如果id或cid不存在，将返回400错误&lt;br/&gt;
                        * 系统将忽略重复发布的评论信息。每次发布将比较最后一条发布评论消息，如果一样将被忽略。因此用户不能连续提交相同信息。发布成功返回发布的信息ID,否则返回为空。&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/comment_destroy/:id" index="9" desc="删除当前用户的微博评论信息">
                    <url>statuses/comment_destroy/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST,DELETE</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要删除的评论ID"/>
                    </params>
                    <description>
                        删除评论。注意：只能删除自己发布的评论，发部微博的用户不可以删除其他人的评论&lt;br/&gt;
                        * 如果评论不存在，将返回403错误&lt;br/&gt;
                        * 如果参数错误，将返回400错误&lt;br/&gt;
                    </description>
                </api>
                
                <api id="statuses/reply" index="10" desc="回复微博评论信息">
                    <url>statuses/reply</url>
                    <formats>xml,json,rss,atom</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="要评论的微博id"/>
                        <param id="cid" rest="false" optional="false" desc="要评论的评论id 如没有或非法则为对微博的评论"/>
                        <param id="comment" rest="false" optional="false" desc="评论内容。必须做URLEncode,信息内容不超过140个汉字"/>
                    </params>
                    <description>
                        对一条微博评论信息进行回复。请求必须用POST方式提交。为防止重复，发布的信息与最后一条评论/回复信息一样话，将会被忽略&lt;br/&gt;
                        * 如果没有登录或参数错误，将返回403错误&lt;br/&gt;
                        * 如果id不存在，将返回400错误&lt;br/&gt;
                        * 系统将忽略重复发布的评论信息。每次发布将比较最后一条发布评论消息，如果一样将被忽略&lt;br/&gt;
                    </description>
                </api>
                
            </catagory>

            <catagory id="users" index="3" desc="用户接口">

                <api id="users/show/:id" index="1" desc="根据用户ID获取用户资料（授权用户）">
                    <url>users/show/:id</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="用户UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="指定用户UID,主要是用来区分用户UID跟微博昵称一样，产生歧义的时候，特别是在用户账号为数字导致和用户Uid发生歧义"/>
                        <param id="screen_name" rest="false" optional="true" desc="指定微博昵称，主要是用来区分用户UID跟微博昵称一样，产生歧义的时候"/>
                    </params>
                    <description>
                        按用户UID或昵称返回用户资料，同时也将返回用户的最新发布的微博&lt;br/&gt;
                        * ID或者昵称不存在返回400错误&lt;br/&gt;
                        * 为了保护用户隐私，只有用户设置了公开或对粉丝设置了公开的数据才会返回。 &lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/friends" index="2" desc="获取当前用户关注对象列表及最新一条微博信息">
                    <url>statuses/friends</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="true" desc="要获取的UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="要获取的UID"/>
                        <param id="screen_name" rest="false" optional="true" desc="要获取的微博昵称"/>
                        <param id="cursor" rest="false" optional="true" desc="单页只能包含100个关注列表，为了获取更多则cursor默认从-1开始，通过增加或减少cursor来获取更多, 如果没有下一页，则next_cursor返回0"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200,默认返回20"/>
                    </params>
                    <description>
                        返回用户关注对象列表，并返回最新微博文章。按关注人的关注时间倒序返回，每次返回N个,通过cursor参数来取得多于N的关注人。&lt;br/&gt;
                        当然也可以通过ID,nickname,user_id参数来获取其他人的关注人列表&lt;br/&gt;
                        如果没有提供cursor参数，将只返回最前面的100个关注列表&lt;br/&gt;
                    </description>
                </api>

                <api id="statuses/followers" index="3" desc="获取当前用户粉丝列表及最新一条微博信息">
                    <url>statuses/followers</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="true" desc="要获取的 UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="要获取的UID"/>
                        <param id="screen_name" rest="false" optional="true" desc="要获取的微博昵称"/>
                        <param id="cursor" rest="false" optional="true" desc="单页只能包含100个关注列表，为了获取更多则cursor默认从-1开始，通过增加或减少cursor来获取更多, 如果没有下一页，则next_cursor返回0"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200,默认返回20"/>
                    </params>
                    <description>
                        返回用户的粉丝列表，并返回粉丝的最新微博。按粉丝的关注时间倒序返回，每次返回100个,通过cursor参数来取得多于100的粉丝。注意目前接口最多只返回5000个粉丝&lt;br/&gt;
                        * 为了保护用户隐私，只有用户设置了公开或对粉丝设置了公开的数据才会返回。&lt;br/&gt;
                        * 如果没有提供cursor参数，将只返回最前面的100个关注列表&lt;br/&gt;
                    </description>
                </api>
                
            </catagory>

            <catagory id="directMessage" index="4" desc="私信接口">

                <api id="direct_messages" index="1" desc="获取当前用户最新私信列表">
                    <url>direct_messages</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" rest="false" optional="true" desc="返回ID比数值since_id大（比since_id时间晚的）的私信"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id(时间不晚于max_id)的私信"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200"/>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制"/>
                    </params>
                    <description>
                        返回用户的最新n条私信，并包含发送者和接受者的详细资料
                    </description>
                </api>

                <api id="direct_messages/sent" index="2" desc="获取当前用户发送的最新私信列表">
                    <url>direct_messages/sent</url>
                    <formats>xml,json,rss,atom</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="since_id" rest="false" optional="true" desc="返回ID比数值since_id大（比since_id时间晚的）的私信"/>
                        <param id="max_id" rest="false" optional="true" desc="返回ID不大于max_id(时间不晚于max_id)的私信"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于200"/>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制"/>
                    </params>
                    <description>
                        返回登录用户已发送最新20条私信。XML和JSON的版本有包括发送者和接受者的详细资料
                    </description>
                </api>

                <api id="direct_messages/new" index="3" desc="发送一条私信">
                    <url>direct_messages/new</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="UID或微博昵称.为了支持数字的微博昵称，需选填写下面2个参数screen_name或user_id"/>
                        <param id="screen_name" rest="false" optional="true" desc="微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="新浪UID"/>
                        <param id="text" rest="false" optional="false" desc="要发生的消息内容，需要做URLEncode，文本大小必须小于300个汉字"/>
                    </params>
                    <description>
                        发送一条私信。必须包含参数user和text,请求必须使用POST方式提交。成功将返回完整的发送消息。&lt;br/&gt;
                        *  此接口问更新受限接口，越权将返回http 403 错误&lt;br/&gt;
                        *  参数不对或缺少返回400错误 &lt;br/&gt;
                    </description>
                </api>

                <api id="direct_messages/destroy/:id" index="4" desc="删除一条私信">
                    <url>direct_messages/destroy/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST,DELETE</methods>
                    <auth>true</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要删除的私信主键ID"/>
                    </params>
                    <description>
                        按ID删除私信。操作用户必须为私信的接收人&lt;br/&gt;
                        参数错误，或者id不存在返回400错误&lt;br/&gt;
                    </description>
                </api>
                
            </catagory>

            <catagory id="friendship" index="5" desc="关注接口">

                <api id="friendships/create/:id" index="1" desc="关注某用户">
                    <url>friendships/create/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要关注的用户UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="要关注的用户UID,主要是用在区分用户UID跟微博昵称一样，产生歧义的时候"/>
                        <param id="screen_name" rest="false" optional="true" desc="要关注的微博昵称,主要是用在区分用户UID跟微博昵称一样，产生歧义的时候"/>
                        <param id="follow" rest="false" optional="true" desc="暂不支持"/>
                    </params>
                    <description>
                        关注一个用户。成功则返回关注人的资料，目前的最多关注2000人，失败则返回一条字符串的说明。如果已经关注了此人，则返回http 403的状态&lt;br/&gt;
                        *  此接口有更新上限，越权将返回http 403 错误&lt;br/&gt;
                        * 关注不存在的ID返回400 &lt;br/&gt;
                    </description>
                </api>

                <api id="friendships/destroy/:id" index="2" desc="取消关注">
                    <url>friendships/destroy/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST,DELETE</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要取消关注的用户UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="要取消关注的用户UID,主要是用在区分用户UID跟微博昵称一样，产生歧义的时候"/>
                        <param id="screen_name" rest="false" optional="true" desc="要取消的微博昵称,主要是用在区分用户UID跟微博昵称一样，产生歧义的时候"/>
                    </params>
                    <description>
                        取消关注某用户。成功则返回被取消关注人的资料，失败则返回一条字符串的说明
                    </description>
                </api>

                <api id="friendships/exists" index="3" desc="是否关注某用户(推荐使用friendships/show)">
                    <url>friendships/exists</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="user_a" rest="false" optional="false" desc="要判断的用户UID"/>
                        <param id="user_b" rest="false" optional="false" desc="要判断的被关注人用户UID"/>
                    </params>
                    <description>
                        判断两个用户是否有关注关系，如果user_a关注了user_b则返回true,否则返回false
                    </description>
                </api>

                <api id="friendships/show" index="4" desc="获取两个用户关系的详细情况">
                    <url>friendships/show</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="source_id" rest="false" optional="true" desc="源用户UID，不填则选择当前用户"/>
                        <param id="source_screen_name" rest="false" optional="true" desc="源微博昵称，不填则选择当前用户"/>
                        <param id="target_id" rest="false" optional="false" desc="要判断的目的用户UID"/>
                        <param id="target_screen_name" rest="false" optional="true" desc="要判断的目的微博昵称"/>
                    </params>
                    <description>
                        返回两个用户关系的详细情况&lt;br/&gt;
                        *  如果用户已登录，此接口将自动使用当前用户ID作为source_id。但是可强制指定source_id来查询关系&lt;br/&gt;
                        * 如果源用户或目的用户不存在，将返回http的400错误&lt;br/&gt;
                        * &amp;lt;blocking&amp;gt;表示source_id用户是否对target_id加黑名单，只对source_id是当前用户有效，即只能看到自己的阻止设置(blocking协议暂不支持返回)&lt;br/&gt;
                    </description>
                </api>

            </catagory>

            <catagory id="friendsFollow" index="6" desc="Social Graph接口">

                <api id="friends/ids" index="1" desc="获取用户关注对象uid列表">
                    <url>friends/ids</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="true" desc="要获取好友的UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="要获取的UID"/>
                        <param id="screen_name" rest="false" optional="true" desc="要获取的微博昵称"/>
                        <param id="cursor" rest="false" optional="true" desc="单页只能包含5000个id，为了获取更多则cursor默认从-1开始，通过增加或减少cursor来获取更多的关注列表"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于5000，默认返回500"/>
                    </params>
                    <description>
                        返回用户关注对象uid列表&lt;br/&gt;
                        * 如果没有提供cursor参数，将只返回最前面的5000个关注id&lt;br/&gt;
                    </description>
                </api>

                <api id="followers/ids" index="2" desc="获取用户粉丝对象uid列表">
                    <url>followers/ids</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="true" desc="要获取好友的UID或微博昵称"/>
                        <param id="user_id" rest="false" optional="true" desc="要获取的UID"/>
                        <param id="screen_name" rest="false" optional="true" desc="要获取的微博昵称"/>
                        <param id="cursor" rest="false" optional="true" desc="单页只能包含5000个id，为了获取更多则cursor默认从-1开始，通过增加或减少cursor来获取更多的关注列表"/>
                        <param id="count" rest="false" optional="true" desc="每次返回的最大记录数（即页面大小），不大于5000，默认返回500"/>
                    </params>
                    <description>
                        返回用户粉丝uid列表，注意目前接口最多只返回5000个粉丝。&lt;br/&gt;
                        * 如果没有提供cursor参数，将只返回最前面的5000个粉丝id&lt;br/&gt;
                    </description>
                </api>

            </catagory>

            <catagory id="account" index="7" desc="账号接口">

                <api id="account/verify_credentials" index="1" desc="验证当前用户身份是否合法">
                    <url>account/verify_credentials</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>false</rate_limit>
                    <params></params>
                    <description>
                        如果用户新浪通行证身份验证成功且用户已经开通微博则返回 http状态为 200；&lt;br/&gt;
                        如果是不则返回401的状态和错误信息。此方法用了判断用户身份是否合法且已经开通微博&lt;br/&gt;
                    </description>
                </api>

                <api id="account/rate_limit_status" index="2" desc="获取当前用户API访问频率限制">
                    <url>account/rate_limit_status</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>false</rate_limit>
                    <params></params>
                    <description>
                        关于API的访问频率限制。返回当前小时还能访问的次数。频率限制是根据用户请求来做的限制，具体可以参加频率限制说明
                    </description>
                </api>

                <api id="account/end_session" index="3" desc="当前用户退出登录">
                    <url>account/end_session</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>false</rate_limit>
                    <params></params>
                    <description>
                        清除已验证用户的session，退出登录，并将cookie设为null。主要用于widget等web应用场合
                    </description>
                </api>

                <api id="account/update_profile_image" index="4" desc="更改头像">
                    <url>account/update_profile_image</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="image" rest="false" optional="false" desc="必须为小于700K的有效的GIF, JPG, 或 PNG 图片. 如果图片大于500像素将按比例缩放"/>
                    </params>
                    <description>
                        更新用户头像。注意：必须为用multipart Data来提交图片内容，不是URL的图片
                    </description>
                </api>

                <api id="account/update_profile" index="5" desc="更改资料">
                    <url>account/update_profile</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="name" rest="false" optional="true" desc="昵称，可选参数.不超过20个汉字"/>
                        <param id="gender" rest="false" optional="true" desc="性别，可选参数. m,男，f,女"/>
                        <param id="province" rest="false" optional="true" desc="省份代码，参考省份城市编码表"/>
                        <param id="city" rest="false" optional="true" desc="城市代码，参考省份城市编码表,1000为不限"/>
                        <param id="description" rest="false" optional="true" desc="描述，不超过160个汉字"/>
                    </params>
                    <description>
                        自定义微博页面的参数。只会修改参数更新项&lt;br/&gt;
                        参数超过发布上限，将返回400错误&lt;br/&gt;
                    </description>
                </api>

                <api id="account/register" index="6" desc="注册新浪微博帐号">
                    <url>account/register</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>false</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="nick" rest="false" optional="false" desc="昵称，必须参数.不超过20个汉字"/>
                        <param id="gender" rest="false" optional="false" desc="性别，必须参数. m,男，f,女"/>
                        <param id="password" rest="false" optional="false" desc="密码 必须参数"/>
                        <param id="email" rest="false" optional="false" desc="注册邮箱 必须参数，需要保持与当前网站同域，如：在abc.com下注册的用户需使用***@abc.com的邮箱"/>
                        <param id="province" rest="false" optional="true" desc="省份代码，参考省份城市编码表"/>
                        <param id="city" rest="false" optional="true" desc="城市代码，参考省份城市编码表,1000为不限"/>
                        <param id="ip" rest="false" optional="false" desc="注册用户时用户当前真实的IP"/>
                    </params>
                    <description>
                        注册新浪微博用户接口，该接口为受限接口（只对受邀请的合作伙伴开放）&lt;br/&gt;
                        参数超过发布上限，将返回400错误&lt;br/&gt;
                    </description>
                </api>

                <api id="account/activate" index="7" desc="二次注册微博的接口">
                    <url>account/activate</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>false</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="uid" rest="false" optional="false" desc="用户UID，必选参数"/>
                        <param id="nickname" rest="false" optional="false" desc="昵称，必须参数.不超过20个汉字"/>
                        <param id="gender" rest="false" optional="false" desc="性别，必须参数. 1,男，2,女"/>
                        <param id="province" rest="false" optional="false" desc="省份代码，参考省份城市编码表"/>
                        <param id="email" rest="false" optional="false" desc="注册邮箱 必须参数，需要保持与当前网站同域，如：在abc.com下注册的用户需使用***@abc.com的邮箱"/>
                        <param id="city" rest="false" optional="" desc="城市代码，参考省份城市编码表,1000为不限"/>
                        <param id="ip" rest="false" optional="false" desc="注册用户时用户当前真实的IP"/>
                    </params>
                    <description>
                        二次注册微博的接口，该接口为受限接口（只对受邀请的合作伙伴开放）&lt;br/&gt;
                        参数超过发布上限，将返回400错误 &lt;br/&gt;
                    </description>
                </api>
                
            </catagory>

            <catagory id="favorites" index="8" desc="收藏接口">

                <api id="favorites" index="1" desc="获取当前用户的收藏列表">
                    <url>favorites</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="page" rest="false" optional="true" desc="返回结果的页序号。注意：有分页限制"/>
                    </params>
                    <description>
                        返回用户的发布的最近20条收藏信息，和用户收藏页面返回内容是一致的
                    </description>
                </api>

                <api id="favorites/create" index="2" desc="添加收藏">
                    <url>favorites/create</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="要收藏的微博id"/>
                    </params>
                    <description>
                        收藏一条微博信息
                        * 如果没有登录或超过发布上限，将返回403错误
                        * 收藏ID不存在，将返回400错误
                        * 收藏成功返回收藏的微博信息
                    </description>
                </api>

                <api id="favorites/destroy/:id" index="3" desc="删除当前用户收藏的微博信息">
                    <url>favorites/destroy/:id</url>
                    <formats>xml,json</formats>
                    <methods>POST,DELETE</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="id" rest="true" optional="false" desc="要删除的收藏微博信息ID"/>
                    </params>
                    <description>
                        删除微博收藏。注意：只能删除自己收藏的信息
                    </description>
                </api>

            </catagory>

            <!--
            <catagory id="OAuth" index="9" desc="登录/OAuth接口">

                <api id="oauth/request_token" index="1" desc="获取未授权的Request Token">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description>
                        通过访问 获取未授权的 Request Token 
                    </description>
                </api>

                <api id="oauth/authorize" index="2" desc="请求用户授权Token">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>

                <api id="oauth/access_token" index="3" desc="获取授权过的Access Token">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>
                
            </catagory>
            -->

        </class>
        
        <class id="search" index="2" desc="微博搜索 API (Search API)">

            <catagory id="usersSearch" index="1" desc="用户搜索">

                <api id="users/search" index="1" desc="搜索微博用户 (仅对新浪合作开发者开放)">
                    <url>users/search</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="q" rest="false" optional="true" desc="查询的关键字。必须进行url encode"/>
                        <param id="snick" rest="false" optional="true" desc="搜索范围包含昵称 (0是不包含，1为包含)"/>
                        <param id="sdomain" rest="false" optional="true" desc="搜索范围包含个性域名 (0是不包含，1为包含)"/>
                        <param id="sintro" rest="false" optional="true" desc="搜索范围包含简介 (0是不包含，1为包含)"/>
                        <param id="province" rest="false" optional="true" desc="省份ID"/>
                        <param id="city" rest="false" optional="true" desc="城市ID"/>
                        <param id="gender" rest="false" optional="true" desc="性别(m为男，f为女)"/>
                        <param id="comorsch" rest="false" optional="true" desc="公司学校名称"/>
                        <param id="sort" rest="false" optional="true" desc="排序方式(1为按更新时间，2为按粉丝数)"/>
                        <param id="page" rest="false" optional="true" desc="页码"/>
                        <param id="count" rest="false" optional="true" desc="分页大小(默认返回10条)"/>
                        <param id="callback" rest="false" optional="true" desc="仅JSON方式支持，用于JSONP callback作用"/>
                    </params>
                    <description>
                        返回关键字匹配的微博用户
                    </description>
                </api>

            </catagory>

            <catagory id="statusSearch" index="2" desc="微博搜索">

                <api id="search" index="1" desc="搜索微博文章 (仅对新浪合作开发者开放)">
                    <url>search</url>
                    <formats>json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="q" rest="false" optional="true" desc="查询的关键字。必须进行url encode"/>
                        <param id="page" rest="false" optional="true" desc="页码(从1开始, 默认1)"/>
                        <param id="rpp" rest="false" optional="true" desc="每页返回的微博数，默认返回10条，最大200"/>
                        <param id="callback" rest="false" optional="true" desc="仅JSON方式支持，用于JSONP callback作用"/>
                        <param id="geocode" rest="false" optional="true" desc="返回指定经纬度附近的微博信息。经纬度参数格式是“纬度,经度,半径”, 半径只支持km公里，为了和标准接口兼容，我们也接受 “mi” (miles)参数，但只会当做 “km” 来查询，暂时未做转换，格式需要url encode编码"/>
                    </params>
                    <description>
                        返回关键字匹配的微博
                    </description>
                </api>

                <api id="statuses/search" index="2" desc="搜索微博(多条件组合) (仅对合作开发者开放)">
                    <url></url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="q" rest="false" optional="true" desc="查询的关键字。必须进行url encode"/>
                        <param id="filter_ori" rest="false" optional="true" desc="过滤器，是否原创 (0为全部，5为原创，4为转发，默认0)"/>
                        <param id="filter_pic" rest="false" optional="true" desc="过滤器，是否含图 (0为全部，1为含图，2为不含图)"/>
                        <param id="fuid" rest="false" optional="true" desc="微博作者UID"/>
                        <param id="province" rest="false" optional="true" desc="省份ID"/>
                        <param id="city" rest="false" optional="true" desc="城市ID"/>
                        <param id="starttime" rest="false" optional="true" desc="开始时间(unix时间戳)"/>
                        <param id="endtime" rest="false" optional="true" desc="截止时间 (unix时间戳)"/>
                        <param id="page" rest="false" optional="true" desc="页码(从1开始, 默认1)"/>
                        <param id="count" rest="false" optional="true" desc="每页返回的微博数，默认返回10条，最大200"/>
                        <param id="callback" rest="false" optional="true" desc="仅JSON方式支持，用于JSONP callback作用"/>
                    </params>
                    <description>
                        返回关键字匹配的微博
                    </description>
                </api>
                
            </catagory>

        </class>

        <!--
        <class id="location" index="3" desc="微博地理位置信息API (Location API) ">

            <catagory id="locationInfo" index="1" desc="地理信息搜索接口">

                <api id="" index="1" desc="">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>

                <api id="" index="2" desc="">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>

            </catagory>

            <catagory id="Coordinate" index="2" desc="坐标获取接口">

                <api id="" index="1" desc="">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>

                <api id="" index="2" desc="">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>

                <api id="" index="3" desc="">
                    <url></url>
                    <formats></formats>
                    <methods></methods>
                    <auth></auth>
                    <rate_limit></rate_limit>
                    <params>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                        <param id="" rest="" optional="" desc=""/>
                    </params>
                    <description></description>
                </api>
                
            </catagory>

        </class>

        -->
        
        <class id="unknowns" index="4" desc="尚未公开的API">

            <catagory id="fans" index="1" desc="粉丝相关">

                <api id="statuses/magic_followers" index="1" desc="获取用户粉丝列表">
                    <url>statuses/magic_followers</url>
                    <formats>json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="user_id" rest="false" optional="false" desc="用户UID"/>
                        <param id="count" rest="false" optional="true" desc="每次获取的记录数，不能超过20，超过则默认为20"/>
                    </params>
                    <description>
                        获取用户优质粉丝列表，每次最多返回20条，包括用户的最新的微博
                    </description>
                </api>
                
            </catagory>

            <catagory id="tags" index="2" desc="标签相关">
                
                <api id="tags" index="1" desc="获取指定用户的标签">
                    <url>tags</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="user_id" rest="false" optional="false" desc="指定用户UID"/>
                        <param id="page" rest="false" optional="true" desc="页码，默认为1"/>
                        <param id="count" rest="false" optional="true" desc="分页大小，默认为10"/>

                    </params>
                    <description>
                        获取指定用户的标签
                    </description>
                </api>

                <api id="tags/suggestions" index="2" desc="获取推荐给用户的标签">
                    <url>tags/suggestions</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="page" rest="false" optional="true" desc="页码，默认为1"/>
                        <param id="count" rest="false" optional="true" desc="分页大小，默认为10"/>
                    </params>
                    <description>
                       获取推荐给用户的标签
                    </description>
                </api>

                <api id="tags/create" index="3" desc="新建标签">
                    <url>tags/create</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="tags" rest="false" optional="false" desc="添加的标签，多个标签之间用逗号间隔"/>
                    </params>
                    <description>
                      新建标签
                    </description>
                </api>
                <api id="tags/destroy" index="4" desc="删除标签">
                    <url>tags/destroy</url>
                    <formats>xml,json</formats>
                    <methods>POST</methods>
                    <auth>true</auth>
                    <rate_limit>true</rate_limit>
                    <params>
                        <param id="tag_id" rest="false" optional="false" desc="需要删除的tag ID"/>
                    </params>
                    <description>
                      删除标签
                    </description>
                </api>
            </catagory>

            <catagory id="internal" index="3" desc="内部接口">

                <api id="querymid" index="1" desc="通过id查mid，内部接口">
                    <url>querymid</url>
                    <formats>json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="id" rest="false" optional="false" desc="微博/评论/私信 id"/>
                        <param id="type" rest="false" optional="false" desc=" id的类型：1=微博，2=评论；3=私信"/>
                    </params>
                    <description>
                        通过id获取mid
                    </description>
                </api>


                <api id="queryid" index="2" desc="通过mid查id，内部接口">
                    <url>queryid</url>
                    <formats>json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="mid" rest="false" optional="false" desc="微博/评论/私信 mid"/>
                        <param id="type" rest="false" optional="false" desc=" id的类型：1=微博，2=评论；3=私信"/>
                        <param id="inbox" rest="false" optional="false" desc=" 仅对私信有效，1=收件箱，其他为发件箱"/>
                        <param id="isBase62" rest="false" optional="true" desc="mid是否是base62编码"/>
                    </params>
                    <description>
                        通过mid获取id
                    </description>
                </api>



                <api id="queryAccessToken" index="3" desc="查询accessToken接口，内部接口">
                    <url>queryAccessToken</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>false</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="q" rest="false" optional="false" desc="json格式的查询。"/>
                    </params>
                    <description>
                        查询accesstoken,白名单访问。&lt;br/&gt;
                        q参数是一组json格式的字符串。&lt;br/&gt;
                        如：[{"uid":"11075","appkey":"1392673069"},{"uid":"1000246505","appkey":"4150769370"}]&lt;br/&gt;
                        拼接URL的时候注意需要对该参数进行URL Encoding.&lt;br/&gt;
                    </description>
                </api>




                <api id="shortUrl" index="4" desc="转换普通url成短url，内部接口">
                    <url>shortUrl</url>
                    <formats>xml,json</formats>
                    <methods>GET</methods>
                    <auth>true</auth>
                    <rate_limit>false</rate_limit>
                    <params>
                        <param id="url" rest="false" optional="false" desc="需要转换的url"/>
                    </params>
                    <description>
                        转换url成短url
                    </description>
                </api>
            </catagory>
        </class>
        
    </version>
</weiboAPIs>
